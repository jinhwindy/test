/**
 * [闭包]
 *  =>函数执行形成一个私有的作用域，保护里面的私有变量
 *  不受外界的干扰，这种保护机制称之为‘闭包’
 * 
 *  =>市面上的开发者认为的闭包是：形成一个不销毁的私有
 *  作用域（私有栈内存）才是闭包
 * 
 * 
 * 例1：(柯里化函数)
 * function(){
 *    return function(){
 *   }
 * }
 * var f=fn();
 * 
 * 
 * 例2：(惰性函数)
 * var utils=(function(){
 *      return {
 *      }
 * })();
 */


 //=>闭包的项目实战应用
 //=>真实项目中为了保证JS的性能（堆栈内存的性能优化），
 //  应该尽可能的减少闭包的使用（不销毁的堆栈内存是消耗性能的）

 //1.闭包具有“保护”作用：保护私有变量不受外界烦扰
 //2.闭包具有“保存”作用：形成不销毁的栈内存，把一些值保存下来，
 //  方便后续的调取使用